import numpy as np
from sim.sim1d import sim_run

# Simulator options.
options = {}
options['FIG_SIZE'] = [8,8]
options['FULL_RECALCULATE'] = True

class ModelPredictiveControl:
    def __init__(self):
        self.horizon = 20
        self.dt = 0.2

        # Reference or set point the controller will achieve.
        self.reference = [80, 0, 0]

    def plant_model(self, prev_state, dt, pedal, steering):
        x_t = prev_state[0]
        v_t = prev_state[3] # m/s

        x_t_1 = x_t + (v_t * dt)    
        v_t_1 = v_t + (pedal * dt) - (v_t / 25)

        return [x_t_1, 0, 0, v_t_1]

    # u => a list of differnt inputs generated by the optimizer. its size is the horizon.    
    # u => [state, dt , pedal , steering] 

    def cost_function(self,u, *args):
        state = args[0]
        ref = args[1]
        cost = 0.0

        speed_limit = 12 # km/h


        for i in range(0,self.horizon):
            state = self.plant_model(state, self.dt, u[i*2], u[i*2+1])
            cost += (state[0] - ref[0])**2
            
            speed_kph = state[3] * 3.6
            if (speed_kph > speed_limit):
                cost += speed_kph * 100

        return cost

sim_run(options, ModelPredictiveControl)
